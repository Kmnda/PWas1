{
  "collection": {
    "_": {
      "postman_id": "a12a1620-d1d2-4de2-86b3-2ab8d36633b3",
      "exporter_id": "44397344",
      "collection_link": "https://ashishnegi-5384068.postman.co/workspace/ashish-negi's-Workspace~77f96d87-6493-4ed4-8d93-0256fe48b770/collection/44397344-a12a1620-d1d2-4de2-86b3-2ab8d36633b3?action=share&source=collection_link&creator=44397344"
    },
    "item": [
      {
        "id": "f214d081-7e36-4810-9eaf-7b82ffd9bea4",
        "name": "Create New User",
        "request": {
          "url": {
            "path": [
              "users"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane.doe@example.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a5462d71-48c7-41a3-b189-36f6f10bcb83",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Check if the status code is 201 (Created)",
                "pm.test(\"Status code is 201 Created\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Test 2: Check if the response body contains the expected name, email, and a number ID",
                "pm.test(\"Response body contains name, email, and a valid ID\", function () {",
                "    const responseJson = pm.response.json(); // Parse the response as JSON",
                "    pm.expect(responseJson.name).to.eql(\"Jane Doe\");",
                "    pm.expect(responseJson.email).to.eql(\"jane.doe@example.com\");",
                "    pm.expect(responseJson.id).to.be.a('number'); // Check if ID is a number",
                "    pm.expect(responseJson.id).to.be.above(0); // Check if ID is positive",
                "});",
                "",
                "// Test 3: Store the newly created user's ID in an environment variable for subsequent tests",
                "// This is crucial for integration testing where one request's output is another's input.",
                "pm.test(\"Store new user ID for chaining tests\", function () {",
                "    const responseJson = pm.response.json();",
                "    pm.environment.set(\"new_user_id\", responseJson.id);",
                "    console.log(\"New user ID created: \" + responseJson.id); // Log to Postman Console",
                "});"
              ],
              "_lastExecutionId": "fc86ac32-0e93-40ea-bb8c-a22ce6cdc79e"
            }
          }
        ]
      },
      {
        "id": "6824c552-9c39-4aed-bdf3-1881bc2d3c40",
        "name": "Get All Users",
        "request": {
          "url": {
            "path": [
              "users"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "aea48fb3-501c-4765-b888-421aaf717abb",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Check if the status code is 200 (OK)",
                "pm.test(\"Status code is 200 OK\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Test 2: Check if the response is an array",
                "pm.test(\"Response is an array of users\", function () {",
                "    pm.expect(pm.response.json()).to.be.an('array');",
                "});",
                "",
                "// Test 3: Verify that the newly created user is present in the list",
                "pm.test(\"Response includes the newly created user\", function () {",
                "    const users = pm.response.json();",
                "    const newUserId = pm.environment.get(\"new_user_id\");",
                "    const newUser = users.find(user => user.id === newUserId);",
                "    pm.expect(newUser).to.be.an('object'); // Check if user object was found",
                "    pm.expect(newUser.name).to.eql(\"Jane Doe\");",
                "    pm.expect(newUser.email).to.eql(\"jane.doe@example.com\");",
                "});"
              ],
              "_lastExecutionId": "2c70ff86-cec3-41cf-a901-c2e8c9f4358f"
            }
          }
        ]
      },
      {
        "id": "26f9a7ca-3b85-48ad-86ee-1dfb3093d2dd",
        "name": "Get User by ID",
        "request": {
          "url": {
            "path": [
              "users",
              "{{new_user_id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9613f90b-274f-4404-b5f9-cea836fe7283",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Check if the status code is 200 (OK)",
                "pm.test(\"Status code is 200 OK\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Test 2: Verify that the response is the correct user",
                "pm.test(\"Response is the correct user\", function () {",
                "    const user = pm.response.json();",
                "    const newUserId = pm.environment.get(\"new_user_id\");",
                "    pm.expect(user.id).to.eql(newUserId);",
                "    pm.expect(user.name).to.eql(\"Jane Doe\"); // Initial name",
                "    pm.expect(user.email).to.eql(\"jane.doe@example.com\");",
                "});"
              ],
              "_lastExecutionId": "ec7ba09a-405a-4dac-8336-da4d04e48fbd"
            }
          }
        ]
      },
      {
        "id": "a77f5894-f0e3-4581-b83c-f344048a0bf2",
        "name": "Update User",
        "request": {
          "url": {
            "path": [
              "users",
              "{{new_user_id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@updated.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e30bedd2-2a6f-4183-8484-d1eeb0ab45d7",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Check if the status code is 200 (OK)",
                "pm.test(\"Status code is 200 OK\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Test 2: Verify that the user's name and email are updated in the response",
                "pm.test(\"User name and email are updated\", function () {",
                "    const responseJson = pm.response.json();",
                "    pm.expect(responseJson.name).to.eql(\"Jane Smith\");",
                "    pm.expect(responseJson.email).to.eql(\"jane.smith@updated.com\");",
                "    pm.expect(responseJson.id).to.eql(pm.environment.get(\"new_user_id\"));",
                "});"
              ],
              "_lastExecutionId": "606ef25d-b335-4c5f-8524-0dca5d295f06"
            }
          }
        ]
      },
      {
        "id": "ec17170a-c8ae-4144-b58a-cc59601accb1",
        "name": "Delete User",
        "request": {
          "url": {
            "path": [
              "users",
              "{{new_user_id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Jane Smith\"\n}\n"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "33c9ec33-58a3-4f34-8db6-fa77a94bbc73",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test 1: Check if the status code is 204 (No Content) for successful deletion",
                "pm.test(\"Status code is 204 No Content\", function () {",
                "    pm.response.to.have.status(204);",
                "});",
                "",
                "// Optional Test 2: Attempt to GET the deleted user to confirm it's gone",
                "// This demonstrates chaining requests within tests",
                "const newUserId = pm.environment.get(\"new_user_id\");",
                "const baseUrl = pm.environment.get(\"baseUrl\");",
                "",
                "pm.sendRequest({",
                "    url: baseUrl + \"/users/\" + newUserId, // Construct the URL explicitly",
                "    method: 'GET'",
                "}, function (err, res) {",
                "    // Check if there was a network error during the chained request",
                "    if (err) {",
                "        console.error(\"Error during chained GET request to verify deletion:\", err);",
                "        pm.test(\"Chained GET request had a network error\", false); // Force this test to fail explicitly",
                "        return;",
                "    }",
                "",
                "    // Now, safely check the response status",
                "    pm.test(\"User no longer exists after deletion (404 check)\", function() {",
                "        // Log the actual status to confirm",
                "        console.log(\"Status of chained GET after deletion:\", res.code); // Changed from res.status to res.code",
                "        pm.expect(res.code).to.eql(404); // Changed from res.status to res.code",
                "    });",
                "});"
              ],
              "_lastExecutionId": "d3ca0e03-8052-4b9f-b002-61d6fb75a608"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "a12a1620-d1d2-4de2-86b3-2ab8d36633b3",
      "name": "Flask API Integration Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-05-27T09:25:58.336Z",
      "postman_exported_using": "Postman/11.47.0"
    },
    "id": "84623a54-cf87-4903-a9cc-84db95089451",
    "name": "Local Flask API",
    "values": [
      {
        "type": "any",
        "value": "http://127.0.0.1:5001",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": 4,
        "key": "new_user_id"
      }
    ]
  },
  "globals": {
    "id": "0b749972-bde7-491f-8af0-463f0fda709e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 3,
      "responseMin": 1,
      "responseMax": 11,
      "responseSd": 3.6055512754639896,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748410663454,
      "completed": 1748410663533
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d9ae289-a822-4a1e-94f5-631d2fc515ee",
          "httpRequestId": "038e9ac0-193a-4be3-a821-4a20f7f0f68f"
        },
        "item": {
          "id": "f214d081-7e36-4810-9eaf-7b82ffd9bea4",
          "name": "Create New User",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane.doe@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5462d71-48c7-41a3-b189-36f6f10bcb83",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 201 (Created)",
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test 2: Check if the response body contains the expected name, email, and a number ID",
                  "pm.test(\"Response body contains name, email, and a valid ID\", function () {",
                  "    const responseJson = pm.response.json(); // Parse the response as JSON",
                  "    pm.expect(responseJson.name).to.eql(\"Jane Doe\");",
                  "    pm.expect(responseJson.email).to.eql(\"jane.doe@example.com\");",
                  "    pm.expect(responseJson.id).to.be.a('number'); // Check if ID is a number",
                  "    pm.expect(responseJson.id).to.be.above(0); // Check if ID is positive",
                  "});",
                  "",
                  "// Test 3: Store the newly created user's ID in an environment variable for subsequent tests",
                  "// This is crucial for integration testing where one request's output is another's input.",
                  "pm.test(\"Store new user ID for chaining tests\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set(\"new_user_id\", responseJson.id);",
                  "    console.log(\"New user ID created: \" + responseJson.id); // Log to Postman Console",
                  "});"
                ],
                "_lastExecutionId": "fc86ac32-0e93-40ea-bb8c-a22ce6cdc79e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5584e7ad-7906-4790-92dd-0845f566e92f",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "63",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane.doe@example.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "21b2e183-b6bb-4ddd-8680-b3027ae16977",
          "status": "CREATED",
          "code": 201,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "77"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              74,
              97,
              110,
              101,
              32,
              68,
              111,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              106,
              97,
              110,
              101,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              52,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 77
        },
        "id": "f214d081-7e36-4810-9eaf-7b82ffd9bea4",
        "assertions": [
          {
            "assertion": "Status code is 201 Created",
            "skipped": false
          },
          {
            "assertion": "Response body contains name, email, and a valid ID",
            "skipped": false
          },
          {
            "assertion": "Store new user ID for chaining tests",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "09b93c84-d8dd-4529-800f-a71f39badc57",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b3b9e53d-a8be-4fbd-a8d8-5175d2f7c610"
        },
        "item": {
          "id": "6824c552-9c39-4aed-bdf3-1881bc2d3c40",
          "name": "Get All Users",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aea48fb3-501c-4765-b888-421aaf717abb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 200 (OK)",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test 2: Check if the response is an array",
                  "pm.test(\"Response is an array of users\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});",
                  "",
                  "// Test 3: Verify that the newly created user is present in the list",
                  "pm.test(\"Response includes the newly created user\", function () {",
                  "    const users = pm.response.json();",
                  "    const newUserId = pm.environment.get(\"new_user_id\");",
                  "    const newUser = users.find(user => user.id === newUserId);",
                  "    pm.expect(newUser).to.be.an('object'); // Check if user object was found",
                  "    pm.expect(newUser.name).to.eql(\"Jane Doe\");",
                  "    pm.expect(newUser.email).to.eql(\"jane.doe@example.com\");",
                  "});"
                ],
                "_lastExecutionId": "2c70ff86-cec3-41cf-a901-c2e8c9f4358f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ec87ffb-46ef-4a86-b964-2b05f17ff578",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0842d48c-7e32-431f-9406-b277bb975823",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "281"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              65,
              108,
              105,
              99,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              97,
              108,
              105,
              99,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              66,
              111,
              98,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              98,
              111,
              98,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              50,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              74,
              97,
              110,
              101,
              32,
              68,
              111,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              106,
              97,
              110,
              101,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              52,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              93,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 281
        },
        "id": "6824c552-9c39-4aed-bdf3-1881bc2d3c40",
        "assertions": [
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "Response is an array of users",
            "skipped": false
          },
          {
            "assertion": "Response includes the newly created user",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1fe5358-d011-46f3-a5c9-392a1a96b076",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf0fbe35-6fe2-4f3e-82f4-41a80014c5be"
        },
        "item": {
          "id": "26f9a7ca-3b85-48ad-86ee-1dfb3093d2dd",
          "name": "Get User by ID",
          "request": {
            "url": {
              "path": [
                "users",
                "{{new_user_id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9613f90b-274f-4404-b5f9-cea836fe7283",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 200 (OK)",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test 2: Verify that the response is the correct user",
                  "pm.test(\"Response is the correct user\", function () {",
                  "    const user = pm.response.json();",
                  "    const newUserId = pm.environment.get(\"new_user_id\");",
                  "    pm.expect(user.id).to.eql(newUserId);",
                  "    pm.expect(user.name).to.eql(\"Jane Doe\"); // Initial name",
                  "    pm.expect(user.email).to.eql(\"jane.doe@example.com\");",
                  "});"
                ],
                "_lastExecutionId": "ec7ba09a-405a-4dac-8336-da4d04e48fbd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users",
              "4"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0d847ca-d842-4ff7-a0f9-f3c4266708b4",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c9d9a15c-4b69-437f-9660-107dee8ff414",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "77"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              74,
              97,
              110,
              101,
              32,
              68,
              111,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              106,
              97,
              110,
              101,
              46,
              100,
              111,
              101,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              52,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 77
        },
        "id": "26f9a7ca-3b85-48ad-86ee-1dfb3093d2dd",
        "assertions": [
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "Response is the correct user",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3893d31c-4b06-47dd-bef7-4da9aeaa4ca4",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bb04225a-f6ad-49b8-846e-d8fe0452ceae"
        },
        "item": {
          "id": "a77f5894-f0e3-4581-b83c-f344048a0bf2",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{new_user_id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@updated.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e30bedd2-2a6f-4183-8484-d1eeb0ab45d7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 200 (OK)",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test 2: Verify that the user's name and email are updated in the response",
                  "pm.test(\"User name and email are updated\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name).to.eql(\"Jane Smith\");",
                  "    pm.expect(responseJson.email).to.eql(\"jane.smith@updated.com\");",
                  "    pm.expect(responseJson.id).to.eql(pm.environment.get(\"new_user_id\"));",
                  "});"
                ],
                "_lastExecutionId": "606ef25d-b335-4c5f-8524-0dca5d295f06"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users",
              "4"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0efcf42c-f621-4d39-9791-a6ae934997fc",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "67",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@updated.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "91b8bf57-63e4-4915-843e-1719bab8c45c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "81"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              74,
              97,
              110,
              101,
              32,
              83,
              109,
              105,
              116,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              106,
              97,
              110,
              101,
              46,
              115,
              109,
              105,
              116,
              104,
              64,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              52,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 81
        },
        "id": "a77f5894-f0e3-4581-b83c-f344048a0bf2",
        "assertions": [
          {
            "assertion": "Status code is 200 OK",
            "skipped": false
          },
          {
            "assertion": "User name and email are updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4428aea6-6401-4595-a2ce-2f16c639e292",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9bb079f4-2a3b-4ef2-aa01-2701fef06930",
          "scriptId": "33c9ec33-58a3-4f34-8db6-fa77a94bbc73",
          "execution": "d3ca0e03-8052-4b9f-b002-61d6fb75a608"
        },
        "item": {
          "id": "ec17170a-c8ae-4144-b58a-cc59601accb1",
          "name": "Delete User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{new_user_id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jane Smith\"\n}\n"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33c9ec33-58a3-4f34-8db6-fa77a94bbc73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 204 (No Content) for successful deletion",
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "// Optional Test 2: Attempt to GET the deleted user to confirm it's gone",
                  "// This demonstrates chaining requests within tests",
                  "const newUserId = pm.environment.get(\"new_user_id\");",
                  "const baseUrl = pm.environment.get(\"baseUrl\");",
                  "",
                  "pm.sendRequest({",
                  "    url: baseUrl + \"/users/\" + newUserId, // Construct the URL explicitly",
                  "    method: 'GET'",
                  "}, function (err, res) {",
                  "    // Check if there was a network error during the chained request",
                  "    if (err) {",
                  "        console.error(\"Error during chained GET request to verify deletion:\", err);",
                  "        pm.test(\"Chained GET request had a network error\", false); // Force this test to fail explicitly",
                  "        return;",
                  "    }",
                  "",
                  "    // Now, safely check the response status",
                  "    pm.test(\"User no longer exists after deletion (404 check)\", function() {",
                  "        // Log the actual status to confirm",
                  "        console.log(\"Status of chained GET after deletion:\", res.code); // Changed from res.status to res.code",
                  "        pm.expect(res.code).to.eql(404); // Changed from res.status to res.code",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d3ca0e03-8052-4b9f-b002-61d6fb75a608"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users",
              "4"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9ba5eb19-54d1-45a0-a344-89d45e41f75d",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d50dfe3b-7e59-41b2-9b96-e6b2358b2e23",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              85,
              115,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 36
        },
        "id": "4ba8e64d-1d21-424b-b205-f2987f83d77b",
        "assertions": [
          {
            "assertion": "Status code is 204 No Content",
            "skipped": false
          },
          {
            "assertion": "User no longer exists after deletion (404 check)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4428aea6-6401-4595-a2ce-2f16c639e292",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9bb079f4-2a3b-4ef2-aa01-2701fef06930",
          "scriptId": "33c9ec33-58a3-4f34-8db6-fa77a94bbc73",
          "execution": "d3ca0e03-8052-4b9f-b002-61d6fb75a608"
        },
        "item": {
          "id": "ec17170a-c8ae-4144-b58a-cc59601accb1",
          "name": "Delete User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{new_user_id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jane Smith\"\n}\n"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33c9ec33-58a3-4f34-8db6-fa77a94bbc73",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test 1: Check if the status code is 204 (No Content) for successful deletion",
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "// Optional Test 2: Attempt to GET the deleted user to confirm it's gone",
                  "// This demonstrates chaining requests within tests",
                  "const newUserId = pm.environment.get(\"new_user_id\");",
                  "const baseUrl = pm.environment.get(\"baseUrl\");",
                  "",
                  "pm.sendRequest({",
                  "    url: baseUrl + \"/users/\" + newUserId, // Construct the URL explicitly",
                  "    method: 'GET'",
                  "}, function (err, res) {",
                  "    // Check if there was a network error during the chained request",
                  "    if (err) {",
                  "        console.error(\"Error during chained GET request to verify deletion:\", err);",
                  "        pm.test(\"Chained GET request had a network error\", false); // Force this test to fail explicitly",
                  "        return;",
                  "    }",
                  "",
                  "    // Now, safely check the response status",
                  "    pm.test(\"User no longer exists after deletion (404 check)\", function() {",
                  "        // Log the actual status to confirm",
                  "        console.log(\"Status of chained GET after deletion:\", res.code); // Changed from res.status to res.code",
                  "        pm.expect(res.code).to.eql(404); // Changed from res.status to res.code",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "d3ca0e03-8052-4b9f-b002-61d6fb75a608"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5001",
            "path": [
              "users",
              "4"
            ],
            "host": [
              "127",
              "0",
              "0",
              "1"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9ba5eb19-54d1-45a0-a344-89d45e41f75d",
              "system": true
            },
            {
              "key": "Host",
              "value": "127.0.0.1:5001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d50dfe3b-7e59-41b2-9b96-e6b2358b2e23",
          "status": "NOT FOUND",
          "code": 404,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.9.6"
            },
            {
              "key": "Date",
              "value": "Wed, 28 May 2025 05:37:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              85,
              115,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 36
        },
        "id": "4ba8e64d-1d21-424b-b205-f2987f83d77b",
        "assertions": [
          {
            "assertion": "Status code is 204 No Content",
            "skipped": false
          },
          {
            "assertion": "User no longer exists after deletion (404 check)",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 552
    },
    "failures": [],
    "error": null
  }
}